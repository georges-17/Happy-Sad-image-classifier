# -*- coding: utf-8 -*-
"""Image Classification Happy/sad

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aLPHpL_uiMlcgE6Rg7k7Lwddv-X-bNDq
"""

import os
import tensorflow as tf

from google.colab import drive
drive.mount('/content/drive')

"""# Remove coruupted images

Since I downloaded data from the web, some of them could get corrupted and python could not read them, so we need to make sure every image is downloaded correctly
"""

import cv2
import imghdr

data_dir = '/content/drive/MyDrive/Image_Classification_Happy_sad/Data'

len(os.listdir(os.path.join(data_dir,'Happy_people')))

img_exts = ['jpeg', 'jpg', 'bmp', 'png']

img_exts

for image_class in os.listdir(data_dir):
  for image in os.listdir(os.path.join(data_dir, image_class)):
    image_path =os.path.join(data_dir,image_class, image)
    try:
      img = cv2.imread(image_path)
      tip = imghdr.what(image_path)
      if tip not in img_exts:
        print('Image is not in ext list {}'.format(image_path))
        os.remove(image_path)
    except Exception as e:
      print('Issue with image {}'.format(image_path))

import numpy as np
import matplotlib.pyplot as plt

data = tf.keras.utils.image_dataset_from_directory(data_dir)

data_iterator = data.as_numpy_iterator()

batch = data_iterator.next()

batch

batch[0].shape

fig, ax = plt.subplots(ncols =4, figsize=(20,20))
for idx, img in enumerate(batch[0][:4]):
  ax[idx].imshow(img.astype(int))
  ax[idx].title.set_text(batch[1][idx])

batch[0].max()

"""# Preprocess

so here the 1 flag == sad
            0 flag == happy

# Scale data
"""

data = data.map(lambda x, y: (x/255, y))

scaled_iter = data.as_numpy_iterator()

batch = scaled_iter.next()

fig, ax = plt.subplots(ncols =4, figsize=(20,20))
for idx, img in enumerate(batch[0][:4]):
  ax[idx].imshow(img)
  ax[idx].title.set_text(batch[1][idx])

"""split data"""

len(data)

train_size = int(len(data)*0.7)
val_size = int(len(data)*0.2)
test_size = int(len(data)*0.1)

train_size

val_size + train_size + test_size

train = data.take(train_size)
val = data.skip(train_size).take(val_size)
test = data.skip(train_size+val_size).take(test_size)

len(train)

"""# Building the Model"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout

model = Sequential()
model.add(Conv2D(16, (3,3), 1, activation='relu', input_shape =(256,256,3)))
model.add(MaxPooling2D())

model.add(Conv2D(32, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())

model.add(Conv2D(16, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())

model.add(Flatten())

model.add(Dense(256, activation ='relu'))
model.add(Dense(1, activation ='sigmoid'))

model.compile(optimizer ='adam', loss = tf.losses.BinaryCrossentropy(), metrics = ['accuracy'] )

model.summary()

logdir = '/content/drive/MyDrive/Image_Classification_Happy_sad/logs'

tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir = logdir)

hist = model.fit(train, epochs = 20, validation_data = val, callbacks = [tensorboard_callback] )

"""# Plot Performance"""

fig = plt.figure()
plt.plot(hist.history['loss'], color ='teal', label ='loss')
plt.plot(hist.history['val_loss'], color = 'orange', label = 'val_loss')
fig.suptitle('loss', fontsize= 20)
plt.legend(loc = 'upper right')
plt.show()

fig = plt.figure()
plt.plot(hist.history['accuracy'], color = 'teal', label='accuracy')
plt.plot(hist.history['val_accuracy'], color = 'orange', label='val_accuracy')
fig.suptitle('Accuracy', fontsize= 20)
plt.legend(loc='upper left')
plt.show()

"""# Testing Model and Evaluate Performance"""

from tensorflow.keras.metrics import Precision, Recall, BinaryAccuracy

pre = Precision()
re = Recall()
biacc = BinaryAccuracy()

for batch in test.as_numpy_iterator():
  X,y = batch
  yhat = model.predict(X)
  pre.update_state(y, yhat)
  re.update_state(y,yhat)
  biacc.update_state(y,yhat)

print(f'Precision: {pre.result().numpy()}, Recall: {re.result().numpy()}, Accuracy: {biacc.result().numpy()}')

"""# Test"""

import cv2

img = cv2.imread('/content/drive/MyDrive/Image_Classification_Happy_sad/sadtest.jpg')
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.show()

resize =tf.image.resize(img, (256,256))
plt.imshow(resize.numpy().astype(int))
plt.show()

np.expand_dims(resize,0).shape

yhat = model.predict(np.expand_dims(resize/255, 0))

yhat

if yhat> 0.5:
  print(f'predicted class is Sad')
else:
  print(f'Predicted class is Happy')